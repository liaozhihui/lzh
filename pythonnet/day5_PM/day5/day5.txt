前情回顾

1. poll方法实现IO多路复用
   p = poll()
	 p.register()
	 p.unregister()
	 p.poll()

2. epoll方法实现IO多路复用
	 * 效率更高
	 * 触发方式更多
	 * 可以监控更多IO

3. struct 模块
   功能 ： 将python数据转换为bytes发送
	         将bytes数据转换为python数据格式
	 
	 Struct(fmt) 生成数据格式对象
	 pack() 将数据打包转换为bytes
	 unpack() 将bytes数据解析

4. 本地套接字
   
	 作用 ： 用于本地两个进程间进行数据通信

5. 多任务编程
	
	 什么是多任务编程？
	 什么是并发，什么是并行？

6. 进程
	 什么是进程？
	 进程的状态？

********************************************************

一. 基于fork的多进程编程

	1. 进程的运行特征
	  【1】 进程可以使用计算机多核资源
		【2】 进程是计算机分配资源的最小单位
		【3】 进程之间的运行互不影响，各自独立
		【4】 每个进程拥有独立的空间，各自使用自己空间资源

	2. fork使用

	  pid = os.fork()
		功能： 创建新的进程
		返回值：整数，如果创建进程失败返回一个负数，如果成功
						则在原有进程中返回新进程的PID，在新进程中返回0

    
		注意：* 子进程会复制父进程全部内存空间，从fork下一句开
					始执行
					* 父子进程各自独立运行，运行顺序不一定
					* 利用父子进程fork返回值的区别，配合if结构让父子进程执行不同的内容几乎是固定搭配
					* 父子进程有各自特有特征比如PID PCB 命令集等。
					* 父进程fork之前开辟的空间子进程同样拥有，父子进程对各自空间的操作不会相互影响

二. 进程相关函数

  1.  os.getpid()
			功能： 获取一个进程的PID值
			返回值： 返回当前进程的PID 
	
	2.  os.getppid()
			功能： 获取父进程的PID号
			返回值： 返回父进程PID
	
	3.  os._exit(status)
			功能: 结束一个进程
			参数：进程的终止状态
	
	4.  sys.exit([status])
			功能：退出进程
			参数：整数 表示退出状态
						字符串 表示退出时打印内容


三. 孤儿和僵尸

  1. 孤儿进程 ： 父进程先于子进程退出，此时子进程成为孤儿进程。

	  特点： 孤儿进程会被系统进程收养，此时系统进程就会成为孤儿进程新的父进程，孤儿进程退出该进程会自动处理。
	
	2. 僵尸进程 ： 子进程先于父进程退出，父进程又没有处理子进程的退出状态，此时子进程就会称为僵尸进程。

	  特点： 僵尸进程虽然结束，但是会存留部分PCB在内存中，大量的僵尸进程会浪费系统的内存资源。


  3. 如何避免僵尸进程产生

	  【1】 使用wait函数处理子进程退出
				
				pid,status = os.wait()
				功能：在父进程中阻塞等待处理子进程退出
				返回值： pid  退出的子进程的PID
								 status  子进程退出状态

				pid,status = os.waitpid(pid,option)
				功能： 在父进程中处理子进程退出状态
				参数： pid    -1  表示等待任意子进程退出
				              >0  表示等待指定的子进程退出			 
							 option 0   表示阻塞等待
											WNOHANG  表示非阻塞

				返回值：pid  退出的子进程的PID
								status  子进程退出状态 
		
		【2】 创建二级子进程处理僵尸

		    1. 父进程创建子进程，等待回收子进程
				2. 子进程创建二级子进程然后退出
				3. 二级子进程称为孤儿，和原来父进程一同执行事件

		【3】 通过信号处理子进程退出
				
				原理： 子进程退出时会发送信号给父进程，如果父进程忽略子进程信号，则系统就会自动处理子进程退出。

				方法： 使用signal模块在父进程创建子进程前写如下语句 ：
				
				  import signal
					signal.signal(signal.SIGCHLD,signal.SIG_IGN)
				
				优点 ： * 非阻塞，不会影响父进程运行
								* 使用该方法，可以处理所有子进程退出


四. 群聊聊天室 

  1. 功能 ： 类似qq群功能
	  【1】 有人进入聊天室需要输入姓名，姓名不能重复

		【2】 有人进入聊天室时，其他人会收到通知：
					xxx 进入了聊天室

		【3】 一个人发消息，其他人会收到：
		      xxx ： xxxxxxxxxxx

		【4】 有人退出聊天室，则其他人也会收到通知
					xxx退出了聊天室

		【5】 扩展功能：服务器可以向所有用户发送公告
		      管理员消息： xxxxxxxxx

	2. 确定技术模型

    【1】 使用字典保存用户信息 {name:ip}

		【2】 套接字选择 ： UDP套接字

		【3】 转发模型： 客户端--》服务器--》其他客户端

		【4】 收发关系处理：多进程分别处理发送接收
	
	3. 注意事项

	  【1】 设计封装方法  函数
		【2】 写一个模块测试一个模块
		【3】 注释的编写添加
	
	4. 具体实现流程
	  
		【1】 搭建网络连接
		【2】 登录
		    1. 客户端： *  输入姓名
										*  将姓名发送给服务端
										*  接收服务端反馈
										*  如果不允许进入则重新输入，允许则进入聊天室
										*  创建新的进程用于消息收发

				2. 服务端： *  接收姓名
										*  判断姓名是否存在
										*  将结果反馈给客户端
										*  不允许登录结束，允许登录则将用户信息插入数据机构保存
										*  将登录信息通知其他人

		【3】 聊天	
		    1. 客户端 ：* 循环发送消息
										* 循环接收消息
				
				2. 服务端 ：* 接收消息，判断请求类型
										* 将消息转发给其他用户


		【4】 退出
		【5】 管理员公告


作业 ： 1. 完成退出功能，解决格式问题
				   * 聊天过程中输入quit表示退出

        2. 熟练掌握进程的创建和运行原理


