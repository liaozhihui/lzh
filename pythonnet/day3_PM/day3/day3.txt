前情回顾

1. tcp传输一些问题
  * 传输特征  recv  send
	* 网络缓冲区
	* 粘包

2. UDP套接字编程
  服务端 ： socket--》bind--》recvfrom，sendto-->close
	客户端 ： socket--》sendto，recvfrom--》close

3. socket模块函数，套接字属性
  fileno()
	getpeername()
	setsockopt()

4. 广播

5. http协议传输
  * 什么是http协议，应用场景
	* 基于http获取一个网页的大体流程
	* http请求（request） ：请求行  请求头  空行  请求体
	  
		  请求行格式： GET   /   HTTP/1.1
			请求类型：GET  POST  HEAD  PUT  DELETE

********************************************************

一. HTTP协议（续）

  1. http响应（response）

	  【1】响应格式：响应行，响应头，空行，响应体

		【2】响应行 ： 反馈基本的响应情况
		    
				HTTP/1.1     200       OK
				版本信息    响应码   附加信息

				响应码 ： 1xx  提示信息，表示请求被接收
				          2xx  响应成功
									3xx  响应需要进一步操作，重定向
									4xx  客户端错误
									5xx  服务器错误
		
		【3】响应头：对响应内容的描述
		    
				Content-Type: text/html
		
		【4】响应体：响应的主体内容信息
  

二. IO 
	
	【1】 定义 ：在内存中存在数据交换的操作认为是IO操作
	    
			e.g.  和终端交互： input   print
			      和磁盘交互： read  write 
						和网络交互： recv  send

			IO密集型程序：在程序执行中有大量IO操作，而cpu运算较少。消耗cpu较少，耗时长。

			计算密集型程序：程序运行中计算较多，IO操作相对较少。cpu消耗多，执行速度快，几乎没有阻塞。


		【2】 IO分类：阻塞IO ，非阻塞IO，IO多路复用

		【3】 阻塞IO 

		  1.定义：在执行IO操作时如果执行条件不满足则阻塞。阻塞IO是IO的默认形态。

			2.效率：阻塞IO是效率很低的一种IO。但是由于逻辑简单所以是默认IO行为。

			3.阻塞情况：
			  * 因为某种执行条件没有满足造成的函数阻塞
				  e.g.  accept   input   recv
				
				* 处理IO的时间较长产生的阻塞状态
				  e.g. 网络传输，大文件读写
			

    【4】非阻塞IO

		  1. 定义 ：通过修改IO属性行为，使原本阻塞的IO变为非阻塞的状态。

			2. 设置套接字为非阻塞IO

			  sockfd.setblocking(bool)
				功能：设置套接字为非阻塞IO
				参数：默认为True，表示套接字IO阻塞；设置为False则				套接字IO变为非阻塞

			3. 超时检测 ：设置一个最长阻塞时间，超过该时间后则不再阻塞等待。

			  sockfd.settimeout(sec)
				功能：设置套接字的超时时间
				参数：设置的时间

		【5】 IO多路复用
		    
				1. 定义：同时监控多个IO事件，当哪个IO事件准备就绪就执行哪个IO事件。以此形成可以同时处理多个IO的行为，避免一个IO阻塞造成其他IO均无法执行，提高了IO执行效率。

				2. 具体方案
				  select方法 ： windows  linux  unix
					poll方法： linux  unix
					epoll方法： linux

				3. python 实现IO多路复用 
				  import select

三. python实现IO多路复用

  1. select 方法

	   rs, ws, xs=select(rlist, wlist, xlist[, timeout])
		 功能: 监控IO事件，阻塞等待IO发生
		 参数：rlist  列表  存放关注的等待发生的IO事件
			     wlist  列表  存放关注的要主动处理的IO事件
					 xlist  列表  存放关注的出现异常要处理的IO
					 timeout  超时时间
			
			返回值：rs 列表  rlist中准备就绪的IO
			        ws 列表  wlist中准备就绪的IO
							xs 列表  xlist中准备就绪的IO

  2. select 实现tcp服务

	  1. 将关注的IO放入对应的监控类别列表
		2. 通过select函数进行监控
		3. 遍历select返回值列表，确定就绪IO事件
		4. 处理发生的IO事件

		注意 ：1. wlist中如果存在IO事件，则select立即返回给ws
           2. 处理IO过程中不要出现死循环占有服务端的情况
					 3. IO多路复用消耗资源较少，效率较高


四. 位运算

  定义 ： 将整数转换为二进制，按二进制位进行运算

	运算符号： &  按位与
	           |  按位或
						 ^  按位异或
						 << 左移
						 >> 右移
	
	  e.g.  14 --> 01110
		      19 --> 10011

					14 & 19 = 00010 = 2  一0则0
					14 | 19 = 11111 = 31 一1则1
					14 ^ 19 = 11101 = 29 相同为0不同为1
					14 << 2 = 111000 = 56 向左移动低位补0
					14 >> 2 = 11 = 3  向右移动去掉低位

作业： 1. 使用select完成一个服务程序，要求将从客户端发来						的信息写入到一个文件中，同时监控服务端的终端	
					输入，将输入内容也写入该文件
			
			 2. 丰富http协议的相关内容

			 3. 复习函数的使用（函数设计，传参）






